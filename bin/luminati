#!/usr/bin/env node
// LICENSE_CODE ZON
'use strict'; /*jslint node:true, esnext:true*/
const _ = require('underscore');
const fs = require('fs');
const path = require('path');
const dns = require('dns');
const express = require('express');
const Luminati = require('../lib/luminati.js');
const glob = require('glob');
const request = require('request');
const humanize = require('humanize');
const moment = require('moment');
const prompt = require('prompt');
const http = require('http');
const socket_io = require('socket.io');
const argv = require('yargs').usage('Usage: $0 [options] config1 config2 ...')
.alias({h: 'help'})
.describe({
    p: 'Listening port',
    log: `Log level (${Object.keys(Luminati.log_level).join('|')})`,
    customer: 'Customer',
    password: 'Password',
    proxy: 'Super proxy ip or country',
    zone: 'Zone',
    country: 'Country',
    city: 'City',
    asn: 'ASN',
    dns: 'DNS resolving (local|remote)',
    pool_size: 'Pool size',
    max_requests: 'Requests per session',
    session_timeout: 'Session establish timeout',
    direct_include: 'Include pattern for direct requests',
    direct_exclude: 'Exclude pattern for direct requests',
    www: 'Local web port',
})
.default({
    p: 23000,
    log: 'WARNING',
    customer: process.env.LUMINATI_CUSTOMER,
    password: process.env.LUMINATI_PASSWORD,
    zone: process.env.LUMINATI_ZONE||'gen',
    max_requests: 1,
    pool_size: 3,
    session_timeout: 5000,
    www: 22999,
}).help('h').argv;
let opts = _.pick(argv, 'zone', 'country', 'city', 'asn', 'max_requests',
    'pool_size', 'log', 'session_timeout', 'direct_include', 'direct_exclude',
    'dns');
let config = argv._.reduce((config, pattern)=>{
    glob.sync(pattern).forEach(filename=>{
        [].push.apply(config, [].concat(JSON.parse(fs.readFileSync(filename,
            {encoding: 'utf8'}))).map(conf=>_.extend({}, opts, conf)));
    });
    return config;
}, []);
config = config.length && config || [opts];

function json(opt){
    if (typeof opt=='string')
        opt = {url: opt};
    opt.json = true;
    return new Promise((resolve, reject)=>{
        request(opt, (err, res, data)=>{
            if (err)
                return reject(err);
            resolve({status: res.statusCode, data: data});
        });
    });
}

function check_credentials(){
    return new Promise((resolve, reject)=>{
        prompt.message = 'Luminati credentials';
        prompt.override = argv;
        prompt.start();
        prompt.get([{
            name: 'customer',
            description: 'CUSTOMER',
            required: true,
        }, {
            name: 'password',
            description: 'PASSWORD',
            required: true,
        }], (err, result)=>{
            if (err)
                return reject(err);
            resolve(_.extend(argv, result));
        });
    });
}

function resolve_super_proxies(){
    return Promise.all([].concat(argv.proxy||'zproxy.luminati.io').map(host=>{
        if (/^\d+\.\d+\.\d+\.\d+$/.test(host))
            return host;
        if (host.length==2)
            host = `servercountry-${host}-session-${Date.now()}.zproxy.luminati.io`;
        return new Promise((resolve, reject)=>{
            dns.resolve(host, (err, ip)=>{
                if (err)
                    return reject(err);
                resolve(ip);
            });
        });
    })).then(hosts=>[].concat.apply([], hosts));
}

function create_proxies(hosts){
    return Promise.all(config.map(conf=>{
        if (!conf.super_proxy)
            hosts.push(conf.super_proxy = hosts.shift());
        conf.port = conf.port || argv.p++;
        if (conf.direct_include || conf.direct_exclude)
        {
            conf.direct = {};
            if (conf.direct_include)
                conf.direct.include = new RegExp(conf.direct_include, 'i');
            if (conf.direct_exclude)
                conf.direct.exclude = new RegExp(conf.direct_exclude, 'i');
            delete conf.direct_include;
            delete conf.direct_exclude;
        }
        return new Luminati(_.extend(_.pick(argv, 'customer',
            'password'), conf));
    }).map(server=>server.listen()));
}

function create_web_interface(proxies){
    const timestamp = Date.now();
    const app = express();
    const server = http.Server(app);
    const io = socket_io(server);
    app.set('view engine', 'ejs');
    app.set('views', path.join(__dirname, 'views'));
    _.extend(app.locals, {humanize: humanize, moment: moment});
    app.use((req, res, next)=>{
        res.locals.path = req.path;
        next();
    });
    app.get('/', (req, res)=>res.render('index', {
        proxies: proxies,
        elapsed: Date.now()-timestamp,
    }));
    app.get('/stats', (req, res, next)=>{
        json({
            url: 'https://luminati.io/api/get_customer_bw?details=1',
            headers: {'x-hola-auth':
                `lum-customer-${argv.customer}-zone-gen-key-${argv.password}`},
        })
        .then(r=>res.render('stats', {stats: r.data[argv.customer]||{}}))
        .catch(next);
    });
    io.on('connection', socket=>{
        const notify = (name, value)=>{
            const data = {};
            data[name] = value;
            io.emit('health', data);
        };
        json('http://lumtest.com/myip')
            .then(()=>notify('network', true))
            .catch(()=>notify('network', false));
        json('http://zproxy.luminati.io:22225/')
            .then(()=>notify('firewall', true))
            .catch(()=>notify('firewall', false));
        json({
            url: 'http://zproxy.luminati.io:22225/',
            headers: {'x-hola-auth':
                `lum-customer-${argv.customer}-zone-gen-key-${argv.password}`},
        })
        .then(res=>notify('credentials', res.status!=407))
        .catch(()=>notify('credentials', false));
    });
    setInterval(()=>io.emit('stats', proxies.reduce((stats, proxy)=>{
        stats[proxy.port] = proxy.stats;
        return stats;
    }, {})), 1000);
    return new Promise((resolve, reject)=>{
        server.listen(argv.www, ()=>resolve(server)).on('error', reject);
    });
}

check_credentials()
.then(resolve_super_proxies)
.then(create_proxies)
.then(proxies=>{
    if (!argv.www)
        return;
    return create_web_interface(proxies).then(server=>
        console.log(`admin interface is available at http://127.0.0.1:${server.address().port}`))
})
.catch(err=>console.log(err));
